// Mocks generated by Mockito 5.4.5 from annotations
// in coffee_repository/test/coffee_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:http_client/http_client.dart' as _i2;
import 'package:local_coffee/local_coffee.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:models/models.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [CoffeeApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoffeeClient extends _i1.Mock implements _i2.CoffeeApiClient {
  MockCoffeeClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<(String?, _i4.Coffee?)> fetchCoffee() =>
      (super.noSuchMethod(
            Invocation.method(#fetchCoffee, []),
            returnValue: _i3.Future<(String?, _i4.Coffee?)>.value((null, null)),
          )
          as _i3.Future<(String?, _i4.Coffee?)>);
}

/// A class which mocks [LocalCoffeeUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalCoffeeUsecase extends _i1.Mock
    implements _i5.LocalCoffeeUsecase {
  MockLocalCoffeeUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i4.Coffee> fetchAll() =>
      (super.noSuchMethod(
            Invocation.method(#fetchAll, []),
            returnValue: <_i4.Coffee>[],
          )
          as List<_i4.Coffee>);

  @override
  _i3.Future<void> save(_i4.Coffee? coffee) =>
      (super.noSuchMethod(
            Invocation.method(#save, [coffee]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> delete(_i4.Coffee? coffee) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [coffee]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i4.Coffee fetchRandom() =>
      (super.noSuchMethod(
            Invocation.method(#fetchRandom, []),
            returnValue: _i6.dummyValue<_i4.Coffee>(
              this,
              Invocation.method(#fetchRandom, []),
            ),
          )
          as _i4.Coffee);
}
