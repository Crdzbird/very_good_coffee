// Mocks generated by Mockito 5.4.5 from annotations
// in app/test/helpers/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:app/presentation/favorites/bloc/favorites_cubit.dart' as _i8;
import 'package:coffee_repository/coffee_repository.dart' as _i7;
import 'package:flutter_bloc/flutter_bloc.dart' as _i9;
import 'package:http_client/http_client.dart' as _i2;
import 'package:local_coffee/local_coffee.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:models/models.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [CoffeeApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoffeeApiClient extends _i1.Mock implements _i2.CoffeeApiClient {
  MockCoffeeApiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<(String?, _i4.Coffee?)> fetchCoffee() =>
      (super.noSuchMethod(
            Invocation.method(#fetchCoffee, []),
            returnValue: _i3.Future<(String?, _i4.Coffee?)>.value((null, null)),
          )
          as _i3.Future<(String?, _i4.Coffee?)>);
}

/// A class which mocks [LocalCoffeeUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalCoffeeUsecase extends _i1.Mock
    implements _i5.LocalCoffeeUsecase {
  MockLocalCoffeeUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i4.Coffee> fetchAll() =>
      (super.noSuchMethod(
            Invocation.method(#fetchAll, []),
            returnValue: <_i4.Coffee>[],
          )
          as List<_i4.Coffee>);

  @override
  _i3.Future<void> save(_i4.Coffee? coffee) =>
      (super.noSuchMethod(
            Invocation.method(#save, [coffee]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> delete(_i4.Coffee? coffee) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [coffee]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i4.Coffee fetchRandom() =>
      (super.noSuchMethod(
            Invocation.method(#fetchRandom, []),
            returnValue: _i6.dummyValue<_i4.Coffee>(
              this,
              Invocation.method(#fetchRandom, []),
            ),
          )
          as _i4.Coffee);
}

/// A class which mocks [CoffeeUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoffeeUsecase extends _i1.Mock implements _i7.CoffeeUsecase {
  MockCoffeeUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<(String?, _i4.Coffee?)> fetch() =>
      (super.noSuchMethod(
            Invocation.method(#fetch, []),
            returnValue: _i3.Future<(String?, _i4.Coffee?)>.value((null, null)),
          )
          as _i3.Future<(String?, _i4.Coffee?)>);

  @override
  List<_i4.Coffee> fetchAllLocal() =>
      (super.noSuchMethod(
            Invocation.method(#fetchAllLocal, []),
            returnValue: <_i4.Coffee>[],
          )
          as List<_i4.Coffee>);

  @override
  _i3.Future<void> save(_i4.Coffee? coffee) =>
      (super.noSuchMethod(
            Invocation.method(#save, [coffee]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> delete(_i4.Coffee? coffee) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [coffee]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [FavoritesCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavoritesCubit extends _i1.Mock implements _i8.FavoritesCubit {
  MockFavoritesCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.FavoritesState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _i6.dummyValue<_i8.FavoritesState>(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i8.FavoritesState);

  @override
  _i3.Stream<_i8.FavoritesState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i3.Stream<_i8.FavoritesState>.empty(),
          )
          as _i3.Stream<_i8.FavoritesState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void fetchFavorites() => super.noSuchMethod(
    Invocation.method(#fetchFavorites, []),
    returnValueForMissingStub: null,
  );

  @override
  void deleteFavorite(_i4.Coffee? coffee) => super.noSuchMethod(
    Invocation.method(#deleteFavorite, [coffee]),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  void emit(_i8.FavoritesState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i9.Change<_i8.FavoritesState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}
